/*

A string S consisting of N characters is called properly nested if:
	•	S is empty;
	•	S has the form "(U)" where U is a properly nested string;
	•	S has the form "VW" where V and W are properly nested strings.
For example, string "(()(())())" is properly nested but string "())" isn't.
Write a function:
class Solution { public int solution(String S); }
that, given a string S consisting of N characters, returns 1 if string S is properly nested and 0 otherwise.
For example, given S = "(()(())())", the function should return 1 and given S = "())", the function should return 0, as explained above.
Assume that:
	•	N is an integer within the range [0..1,000,000];
	•	string S consists only of the characters "(" and/or ")".
Complexity:
	•	expected worst-case time complexity is O(N);
	•	expected worst-case space complexity is O(1) (not counting the storage required for input arguments).
Copyright 2009–2016 by Codility Limited. All Rights Reserved. Unauthorized copying, publication or disclosure prohibited. 

*/

// you can also use imports, for example:
// import java.util.*;

// you can write to stdout for debugging purposes, e.g.
// System.out.println("this is a debug message");

import java.util.*;
class Solution {
    private static final char LEFT_BRACKET = '(';
    private static final char RIGHT_BRACKET = '(';
    private ArrayDeque<Character> ad = new ArrayDeque<>();
    public int solution(String S) {
        // write your code in Java SE 8
        
        if(S.length()==0)
        {
         return 1;   
        }
        if( S.charAt(0) != LEFT_BRACKET)
        {
         return 0;   
        }
        for(int i=0;i<S.length();i++)
        {
         if(S.charAt(i) == LEFT_BRACKET)
         {
            ad.push(LEFT_BRACKET); 
         }
         else
         {
          if(ad.isEmpty())
          {
           return 0;   
          }
          else
          {
           ad.pop();   
          }
             
         }
                     
        }
         if(ad.isEmpty())
         {
          return 1;   
         }
        return 0;
    }
}
